---
- block:
    # Delete the venv in order to avoid packages conflicts
    - name: Delete existing venv if exists
      vars:
        ansible_python_interpreter: /usr/libexec/platform-python
      file:
        path: "{{ venv_path }}"
        state: absent

    - name: Install requirements for pip virtualenv
      vars:
        ansible_python_interpreter: /usr/libexec/platform-python
        os_version: '{%- if hostvars[groups["undercloud"][0]].ansible_distribution_major_version == "7" -%}
                        rhel7
                     {%- else -%}
                        rhel8
                     {%- endif -%}'
        pkg_ver_list: "{{ packages[os_version] }}"
      package:
        name: "{{ item }}"
        state: present
      loop: "{{ pkg_ver_list | flatten(levels=1) }}"
  become: true

- name: Check if python3 pip rpm package installed
  package:
    name: python3-pip
    state: present
  become: true
  register: rpm_pip3
  ignore_errors: yes

- name: Install virtualenv module
  shell: /usr/bin/python3 -m venv "{{ venv_path }}" && source "{{ venv_path }}/bin/activate" && pip install -U pip setuptools

- name: Install create virtualenv and openstacksdk packages
  vars:
    ansible_python_interpreter: "{{ venv_path}}/bin/python"
  pip:
    name:
      - openstacksdk>=0.39,<0.40.0 ; python_version < '3'
      - openstacksdk==0.61.0 ; python_version >= '3'
    virtualenv: "{{ venv_path }}"
    #    virtualenv_command: "/usr/bin/python3 -m venv"

- name: Fetch private key from the undercloud host
  vars:
    ansible_python_interpreter: /usr/libexec/platform-python
  fetch:
    src: "/home/stack/.ssh/id_rsa"
    dest: "{{ overcloud_private_key }}"
    flat: yes

- name: Set SSH key permissions
  file:
    path: "{{ overcloud_private_key }}"
    mode: 0600
  delegate_to: localhost

- name: get overcloud node data osp_version < 17
  block:
    - name: Grab auth data from stackrc file and publish it as YAML
      ### ToDo(MaximB): Convert the task to more generic execution.
      ###               Implement reuse.
      vars:
        ansible_python_interpreter: /usr/libexec/platform-python
      shell: |
          source "{{ rc_file_path | default('/home/stack/stackrc') }}"
          echo "
          auth_url: $OS_AUTH_URL
          username: $OS_USERNAME
          password: $OS_PASSWORD
          project_name: ${OS_PROJECT_NAME:-$OS_TENANT_NAME}
          user_domain_name: ${OS_USER_DOMAIN_NAME:-''}
          project_domain_name: ${OS_PROJECT_DOMAIN_NAME:-''}
          "
      register: creds

    - name: Gather Overcloud nodes data
      vars:
        ansible_python_interpreter: "{{ venv_path }}/bin/python"
      os_server_facts:
        auth: "{{ creds.stdout | from_yaml }}"
        # Required for SSL
        validate_certs: no
  when: undercloud_version | int < 17

- name: get overcloud node data osp_version >= 17
  block:
    - name: Read clouds.yaml for osp17
      command: "cat {{ osp17_inventory_path | default('/home/stack/overcloud-deploy/overcloud/tripleo-ansible-inventory.yaml') }}"
      register: inv

    - name: Read vars into yaml
      vars:
        inventory: {}
      set_fact:
        inventory: "{{ inventory | combine(item.value.hosts | default({'allovercloud': omit})) }}" 
      with_dict: "{{ inv.stdout | from_yaml }}"
      when: item.key != 'Undercloud'
  when: undercloud_version | int >= 17
